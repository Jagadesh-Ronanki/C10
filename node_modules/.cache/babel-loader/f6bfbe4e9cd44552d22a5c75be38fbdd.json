{"ast":null,"code":"/* globals AbortController */\n\n'use strict';\n\nconst {\n  extractBody,\n  mixinBody,\n  cloneBody\n} = require('./body');\nconst {\n  Headers,\n  fill: fillHeaders,\n  HeadersList\n} = require('./headers');\nconst {\n  FinalizationRegistry\n} = require('../compat/dispatcher-weakref')();\nconst util = require('../core/util');\nconst {\n  isValidHTTPToken,\n  sameOrigin,\n  normalizeMethod\n} = require('./util');\nconst {\n  forbiddenMethods,\n  corsSafeListedMethods,\n  referrerPolicy,\n  requestRedirect,\n  requestMode,\n  requestCredentials,\n  requestCache\n} = require('./constants');\nconst {\n  kEnumerableProperty\n} = util;\nconst {\n  kHeaders,\n  kSignal,\n  kState,\n  kGuard,\n  kRealm\n} = require('./symbols');\nconst {\n  webidl\n} = require('./webidl');\nconst {\n  getGlobalOrigin\n} = require('./global');\nconst {\n  kHeadersList\n} = require('../core/symbols');\nconst assert = require('assert');\nlet TransformStream;\nconst kInit = Symbol('init');\nconst requestFinalizer = new FinalizationRegistry(_ref => {\n  let {\n    signal,\n    abort\n  } = _ref;\n  signal.removeEventListener('abort', abort);\n});\n\n// https://fetch.spec.whatwg.org/#request-class\nclass Request {\n  // https://fetch.spec.whatwg.org/#dom-request\n  constructor(input) {\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (input === kInit) {\n      return;\n    }\n    if (arguments.length < 1) {\n      throw new TypeError(`Failed to construct 'Request': 1 argument required, but only ${arguments.length} present.`);\n    }\n    input = webidl.converters.RequestInfo(input);\n    init = webidl.converters.RequestInit(init);\n\n    // TODO\n    this[kRealm] = {\n      settingsObject: {\n        baseUrl: getGlobalOrigin()\n      }\n    };\n\n    // 1. Let request be null.\n    let request = null;\n\n    // 2. Let fallbackMode be null.\n    let fallbackMode = null;\n\n    // 3. Let baseURL be this’s relevant settings object’s API base URL.\n    const baseUrl = this[kRealm].settingsObject.baseUrl;\n\n    // 4. Let signal be null.\n    let signal = null;\n\n    // 5. If input is a string, then:\n    if (typeof input === 'string') {\n      // 1. Let parsedURL be the result of parsing input with baseURL.\n      // 2. If parsedURL is failure, then throw a TypeError.\n      let parsedURL;\n      try {\n        parsedURL = new URL(input, baseUrl);\n      } catch (err) {\n        throw new TypeError('Failed to parse URL from ' + input, {\n          cause: err\n        });\n      }\n\n      // 3. If parsedURL includes credentials, then throw a TypeError.\n      if (parsedURL.username || parsedURL.password) {\n        throw new TypeError('Request cannot be constructed from a URL that includes credentials: ' + input);\n      }\n\n      // 4. Set request to a new request whose URL is parsedURL.\n      request = makeRequest({\n        urlList: [parsedURL]\n      });\n\n      // 5. Set fallbackMode to \"cors\".\n      fallbackMode = 'cors';\n    } else {\n      // 6. Otherwise:\n\n      // 7. Assert: input is a Request object.\n      assert(input instanceof Request);\n\n      // 8. Set request to input’s request.\n      request = input[kState];\n\n      // 9. Set signal to input’s signal.\n      signal = input[kSignal];\n    }\n\n    // 7. Let origin be this’s relevant settings object’s origin.\n    const origin = this[kRealm].settingsObject.origin;\n\n    // 8. Let window be \"client\".\n    let window = 'client';\n\n    // 9. If request’s window is an environment settings object and its origin\n    // is same origin with origin, then set window to request’s window.\n    if (request.window?.constructor?.name === 'EnvironmentSettingsObject' && sameOrigin(request.window, origin)) {\n      window = request.window;\n    }\n\n    // 10. If init[\"window\"] exists and is non-null, then throw a TypeError.\n    if (init.window !== undefined && init.window != null) {\n      throw new TypeError(`'window' option '${window}' must be null`);\n    }\n\n    // 11. If init[\"window\"] exists, then set window to \"no-window\".\n    if (init.window !== undefined) {\n      window = 'no-window';\n    }\n\n    // 12. Set request to a new request with the following properties:\n    request = makeRequest({\n      // URL request’s URL.\n      // undici implementation note: this is set as the first item in request's urlList in makeRequest\n      // method request’s method.\n      method: request.method,\n      // header list A copy of request’s header list.\n      // undici implementation note: headersList is cloned in makeRequest\n      headersList: request.headersList,\n      // unsafe-request flag Set.\n      unsafeRequest: request.unsafeRequest,\n      // client This’s relevant settings object.\n      client: this[kRealm].settingsObject,\n      // window window.\n      window,\n      // priority request’s priority.\n      priority: request.priority,\n      // origin request’s origin. The propagation of the origin is only significant for navigation requests\n      // being handled by a service worker. In this scenario a request can have an origin that is different\n      // from the current client.\n      origin: request.origin,\n      // referrer request’s referrer.\n      referrer: request.referrer,\n      // referrer policy request’s referrer policy.\n      referrerPolicy: request.referrerPolicy,\n      // mode request’s mode.\n      mode: request.mode,\n      // credentials mode request’s credentials mode.\n      credentials: request.credentials,\n      // cache mode request’s cache mode.\n      cache: request.cache,\n      // redirect mode request’s redirect mode.\n      redirect: request.redirect,\n      // integrity metadata request’s integrity metadata.\n      integrity: request.integrity,\n      // keepalive request’s keepalive.\n      keepalive: request.keepalive,\n      // reload-navigation flag request’s reload-navigation flag.\n      reloadNavigation: request.reloadNavigation,\n      // history-navigation flag request’s history-navigation flag.\n      historyNavigation: request.historyNavigation,\n      // URL list A clone of request’s URL list.\n      urlList: [...request.urlList]\n    });\n\n    // 13. If init is not empty, then:\n    if (Object.keys(init).length > 0) {\n      // 1. If request’s mode is \"navigate\", then set it to \"same-origin\".\n      if (request.mode === 'navigate') {\n        request.mode = 'same-origin';\n      }\n\n      // 2. Unset request’s reload-navigation flag.\n      request.reloadNavigation = false;\n\n      // 3. Unset request’s history-navigation flag.\n      request.historyNavigation = false;\n\n      // 4. Set request’s origin to \"client\".\n      request.origin = 'client';\n\n      // 5. Set request’s referrer to \"client\"\n      request.referrer = 'client';\n\n      // 6. Set request’s referrer policy to the empty string.\n      request.referrerPolicy = '';\n\n      // 7. Set request’s URL to request’s current URL.\n      request.url = request.urlList[request.urlList.length - 1];\n\n      // 8. Set request’s URL list to « request’s URL ».\n      request.urlList = [request.url];\n    }\n\n    // 14. If init[\"referrer\"] exists, then:\n    if (init.referrer !== undefined) {\n      // 1. Let referrer be init[\"referrer\"].\n      const referrer = init.referrer;\n\n      // 2. If referrer is the empty string, then set request’s referrer to \"no-referrer\".\n      if (referrer === '') {\n        request.referrer = 'no-referrer';\n      } else {\n        // 1. Let parsedReferrer be the result of parsing referrer with\n        // baseURL.\n        // 2. If parsedReferrer is failure, then throw a TypeError.\n        let parsedReferrer;\n        try {\n          parsedReferrer = new URL(referrer, baseUrl);\n        } catch (err) {\n          throw new TypeError(`Referrer \"${referrer}\" is not a valid URL.`, {\n            cause: err\n          });\n        }\n\n        // 3. If one of the following is true\n        // parsedReferrer’s cannot-be-a-base-URL is true, scheme is \"about\",\n        // and path contains a single string \"client\"\n        // parsedReferrer’s origin is not same origin with origin\n        // then set request’s referrer to \"client\".\n        // TODO\n\n        // 4. Otherwise, set request’s referrer to parsedReferrer.\n        request.referrer = parsedReferrer;\n      }\n    }\n\n    // 15. If init[\"referrerPolicy\"] exists, then set request’s referrer policy\n    // to it.\n    if (init.referrerPolicy !== undefined) {\n      request.referrerPolicy = init.referrerPolicy;\n      if (!referrerPolicy.includes(request.referrerPolicy)) {\n        throw new TypeError(`Failed to construct 'Request': The provided value '${request.referrerPolicy}' is not a valid enum value of type ReferrerPolicy.`);\n      }\n    }\n\n    // 16. Let mode be init[\"mode\"] if it exists, and fallbackMode otherwise.\n    let mode;\n    if (init.mode !== undefined) {\n      mode = init.mode;\n      if (!requestMode.includes(mode)) {\n        throw new TypeError(`Failed to construct 'Request': The provided value '${request.mode}' is not a valid enum value of type RequestMode.`);\n      }\n    } else {\n      mode = fallbackMode;\n    }\n\n    // 17. If mode is \"navigate\", then throw a TypeError.\n    if (mode === 'navigate') {\n      webidl.errors.exception({\n        header: 'Request constructor',\n        message: 'invalid request mode navigate.'\n      });\n    }\n\n    // 18. If mode is non-null, set request’s mode to mode.\n    if (mode != null) {\n      request.mode = mode;\n    }\n\n    // 19. If init[\"credentials\"] exists, then set request’s credentials mode\n    // to it.\n    if (init.credentials !== undefined) {\n      request.credentials = init.credentials;\n      if (!requestCredentials.includes(request.credentials)) {\n        throw new TypeError(`Failed to construct 'Request': The provided value '${request.credentials}' is not a valid enum value of type RequestCredentials.`);\n      }\n    }\n\n    // 18. If init[\"cache\"] exists, then set request’s cache mode to it.\n    if (init.cache !== undefined) {\n      request.cache = init.cache;\n      if (!requestCache.includes(request.cache)) {\n        throw new TypeError(`Failed to construct 'Request': The provided value '${request.cache}' is not a valid enum value of type RequestCache.`);\n      }\n    }\n\n    // 21. If request’s cache mode is \"only-if-cached\" and request’s mode is\n    // not \"same-origin\", then throw a TypeError.\n    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {\n      throw new TypeError(\"'only-if-cached' can be set only with 'same-origin' mode\");\n    }\n\n    // 22. If init[\"redirect\"] exists, then set request’s redirect mode to it.\n    if (init.redirect !== undefined) {\n      request.redirect = init.redirect;\n      if (!requestRedirect.includes(request.redirect)) {\n        throw new TypeError(`Failed to construct 'Request': The provided value '${request.redirect}' is not a valid enum value of type RequestRedirect.`);\n      }\n    }\n\n    // 23. If init[\"integrity\"] exists, then set request’s integrity metadata to it.\n    if (init.integrity !== undefined && init.integrity != null) {\n      request.integrity = String(init.integrity);\n    }\n\n    // 24. If init[\"keepalive\"] exists, then set request’s keepalive to it.\n    if (init.keepalive !== undefined) {\n      request.keepalive = Boolean(init.keepalive);\n    }\n\n    // 25. If init[\"method\"] exists, then:\n    if (init.method !== undefined) {\n      // 1. Let method be init[\"method\"].\n      let method = init.method;\n\n      // 2. If method is not a method or method is a forbidden method, then\n      // throw a TypeError.\n      if (!isValidHTTPToken(init.method)) {\n        throw TypeError(`'${init.method}' is not a valid HTTP method.`);\n      }\n      if (forbiddenMethods.indexOf(method.toUpperCase()) !== -1) {\n        throw TypeError(`'${init.method}' HTTP method is unsupported.`);\n      }\n\n      // 3. Normalize method.\n      method = normalizeMethod(init.method);\n\n      // 4. Set request’s method to method.\n      request.method = method;\n    }\n\n    // 26. If init[\"signal\"] exists, then set signal to it.\n    if (init.signal !== undefined) {\n      signal = init.signal;\n    }\n\n    // 27. Set this’s request to request.\n    this[kState] = request;\n\n    // 28. Set this’s signal to a new AbortSignal object with this’s relevant\n    // Realm.\n    const ac = new AbortController();\n    this[kSignal] = ac.signal;\n    this[kSignal][kRealm] = this[kRealm];\n\n    // 29. If signal is not null, then make this’s signal follow signal.\n    if (signal != null) {\n      if (!signal || typeof signal.aborted !== 'boolean' || typeof signal.addEventListener !== 'function') {\n        throw new TypeError(\"Failed to construct 'Request': member signal is not of type AbortSignal.\");\n      }\n      if (signal.aborted) {\n        ac.abort(signal.reason);\n      } else {\n        const abort = () => ac.abort(signal.reason);\n        signal.addEventListener('abort', abort, {\n          once: true\n        });\n        requestFinalizer.register(this, {\n          signal,\n          abort\n        });\n      }\n    }\n\n    // 30. Set this’s headers to a new Headers object with this’s relevant\n    // Realm, whose header list is request’s header list and guard is\n    // \"request\".\n    this[kHeaders] = new Headers();\n    this[kHeaders][kHeadersList] = request.headersList;\n    this[kHeaders][kGuard] = 'request';\n    this[kHeaders][kRealm] = this[kRealm];\n\n    // 31. If this’s request’s mode is \"no-cors\", then:\n    if (mode === 'no-cors') {\n      // 1. If this’s request’s method is not a CORS-safelisted method,\n      // then throw a TypeError.\n      if (!corsSafeListedMethods.includes(request.method)) {\n        throw new TypeError(`'${request.method} is unsupported in no-cors mode.`);\n      }\n\n      // 2. Set this’s headers’s guard to \"request-no-cors\".\n      this[kHeaders][kGuard] = 'request-no-cors';\n    }\n\n    // 32. If init is not empty, then:\n    if (Object.keys(init).length !== 0) {\n      // 1. Let headers be a copy of this’s headers and its associated header\n      // list.\n      let headers = new Headers(this[kHeaders]);\n\n      // 2. If init[\"headers\"] exists, then set headers to init[\"headers\"].\n      if (init.headers !== undefined) {\n        headers = init.headers;\n      }\n\n      // 3. Empty this’s headers’s header list.\n      this[kHeaders][kHeadersList].clear();\n\n      // 4. If headers is a Headers object, then for each header in its header\n      // list, append header’s name/header’s value to this’s headers.\n      if (headers.constructor.name === 'Headers') {\n        for (const [key, val] of headers) {\n          this[kHeaders].append(key, val);\n        }\n      } else {\n        // 5. Otherwise, fill this’s headers with headers.\n        fillHeaders(this[kHeaders], headers);\n      }\n    }\n\n    // 33. Let inputBody be input’s request’s body if input is a Request\n    // object; otherwise null.\n    const inputBody = input instanceof Request ? input[kState].body : null;\n\n    // 34. If either init[\"body\"] exists and is non-null or inputBody is\n    // non-null, and request’s method is `GET` or `HEAD`, then throw a\n    // TypeError.\n    if ((init.body !== undefined && init.body != null || inputBody != null) && (request.method === 'GET' || request.method === 'HEAD')) {\n      throw new TypeError('Request with GET/HEAD method cannot have body.');\n    }\n\n    // 35. Let initBody be null.\n    let initBody = null;\n\n    // 36. If init[\"body\"] exists and is non-null, then:\n    if (init.body !== undefined && init.body != null) {\n      // 1. Let Content-Type be null.\n      // 2. Set initBody and Content-Type to the result of extracting\n      // init[\"body\"], with keepalive set to request’s keepalive.\n      const [extractedBody, contentType] = extractBody(init.body, request.keepalive);\n      initBody = extractedBody;\n\n      // 3, If Content-Type is non-null and this’s headers’s header list does\n      // not contain `Content-Type`, then append `Content-Type`/Content-Type to\n      // this’s headers.\n      if (contentType && !this[kHeaders].has('content-type')) {\n        this[kHeaders].append('content-type', contentType);\n      }\n    }\n\n    // 37. Let inputOrInitBody be initBody if it is non-null; otherwise\n    // inputBody.\n    const inputOrInitBody = initBody ?? inputBody;\n\n    // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is\n    // null, then:\n    if (inputOrInitBody != null && inputOrInitBody.source == null) {\n      // 1. If this’s request’s mode is neither \"same-origin\" nor \"cors\",\n      // then throw a TypeError.\n      if (request.mode !== 'same-origin' && request.mode !== 'cors') {\n        throw new TypeError('If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"');\n      }\n\n      // 2. Set this’s request’s use-CORS-preflight flag.\n      request.useCORSPreflightFlag = true;\n    }\n\n    // 39. Let finalBody be inputOrInitBody.\n    let finalBody = inputOrInitBody;\n\n    // 40. If initBody is null and inputBody is non-null, then:\n    if (initBody == null && inputBody != null) {\n      // 1. If input is unusable, then throw a TypeError.\n      if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {\n        throw new TypeError('Cannot construct a Request with a Request object that has already been used.');\n      }\n\n      // 2. Set finalBody to the result of creating a proxy for inputBody.\n      if (!TransformStream) {\n        TransformStream = require('stream/web').TransformStream;\n      }\n\n      // https://streams.spec.whatwg.org/#readablestream-create-a-proxy\n      const identityTransform = new TransformStream();\n      inputBody.stream.pipeThrough(identityTransform);\n      finalBody = {\n        source: inputBody.source,\n        length: inputBody.length,\n        stream: identityTransform.readable\n      };\n    }\n\n    // 41. Set this’s request’s body to finalBody.\n    this[kState].body = finalBody;\n  }\n  get [Symbol.toStringTag]() {\n    return this.constructor.name;\n  }\n\n  // Returns request’s HTTP method, which is \"GET\" by default.\n  get method() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    // The method getter steps are to return this’s request’s method.\n    return this[kState].method;\n  }\n\n  // Returns the URL of request as a string.\n  get url() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    // The url getter steps are to return this’s request’s URL, serialized.\n    return this[kState].url.toString();\n  }\n\n  // Returns a Headers object consisting of the headers associated with request.\n  // Note that headers added in the network layer by the user agent will not\n  // be accounted for in this object, e.g., the \"Host\" header.\n  get headers() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    // The headers getter steps are to return this’s headers.\n    return this[kHeaders];\n  }\n\n  // Returns the kind of resource requested by request, e.g., \"document\"\n  // or \"script\".\n  get destination() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    // The destination getter are to return this’s request’s destination.\n    return this[kState].destination;\n  }\n\n  // Returns the referrer of request. Its value can be a same-origin URL if\n  // explicitly set in init, the empty string to indicate no referrer, and\n  // \"about:client\" when defaulting to the global’s default. This is used\n  // during fetching to determine the value of the `Referer` header of the\n  // request being made.\n  get referrer() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    // 1. If this’s request’s referrer is \"no-referrer\", then return the\n    // empty string.\n    if (this[kState].referrer === 'no-referrer') {\n      return '';\n    }\n\n    // 2. If this’s request’s referrer is \"client\", then return\n    // \"about:client\".\n    if (this[kState].referrer === 'client') {\n      return 'about:client';\n    }\n\n    // Return this’s request’s referrer, serialized.\n    return this[kState].referrer.toString();\n  }\n\n  // Returns the referrer policy associated with request.\n  // This is used during fetching to compute the value of the request’s\n  // referrer.\n  get referrerPolicy() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    // The referrerPolicy getter steps are to return this’s request’s referrer policy.\n    return this[kState].referrerPolicy;\n  }\n\n  // Returns the mode associated with request, which is a string indicating\n  // whether the request will use CORS, or will be restricted to same-origin\n  // URLs.\n  get mode() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    // The mode getter steps are to return this’s request’s mode.\n    return this[kState].mode;\n  }\n\n  // Returns the credentials mode associated with request,\n  // which is a string indicating whether credentials will be sent with the\n  // request always, never, or only when sent to a same-origin URL.\n  get credentials() {\n    // The credentials getter steps are to return this’s request’s credentials mode.\n    return this[kState].credentials;\n  }\n\n  // Returns the cache mode associated with request,\n  // which is a string indicating how the request will\n  // interact with the browser’s cache when fetching.\n  get cache() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    // The cache getter steps are to return this’s request’s cache mode.\n    return this[kState].cache;\n  }\n\n  // Returns the redirect mode associated with request,\n  // which is a string indicating how redirects for the\n  // request will be handled during fetching. A request\n  // will follow redirects by default.\n  get redirect() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    // The redirect getter steps are to return this’s request’s redirect mode.\n    return this[kState].redirect;\n  }\n\n  // Returns request’s subresource integrity metadata, which is a\n  // cryptographic hash of the resource being fetched. Its value\n  // consists of multiple hashes separated by whitespace. [SRI]\n  get integrity() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    // The integrity getter steps are to return this’s request’s integrity\n    // metadata.\n    return this[kState].integrity;\n  }\n\n  // Returns a boolean indicating whether or not request can outlive the\n  // global in which it was created.\n  get keepalive() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    // The keepalive getter steps are to return this’s request’s keepalive.\n    return this[kState].keepalive;\n  }\n\n  // Returns a boolean indicating whether or not request is for a reload\n  // navigation.\n  get isReloadNavigation() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    // The isReloadNavigation getter steps are to return true if this’s\n    // request’s reload-navigation flag is set; otherwise false.\n    return this[kState].reloadNavigation;\n  }\n\n  // Returns a boolean indicating whether or not request is for a history\n  // navigation (a.k.a. back-foward navigation).\n  get isHistoryNavigation() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    // The isHistoryNavigation getter steps are to return true if this’s request’s\n    // history-navigation flag is set; otherwise false.\n    return this[kState].historyNavigation;\n  }\n\n  // Returns the signal associated with request, which is an AbortSignal\n  // object indicating whether or not request has been aborted, and its\n  // abort event handler.\n  get signal() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    // The signal getter steps are to return this’s signal.\n    return this[kSignal];\n  }\n\n  // Returns a clone of request.\n  clone() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (this.bodyUsed || this.body?.locked) {\n      throw new TypeError('unusable');\n    }\n\n    // 2. Let clonedRequest be the result of cloning this’s request.\n    const clonedRequest = cloneRequest(this[kState]);\n\n    // 3. Let clonedRequestObject be the result of creating a Request object,\n    // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.\n    const clonedRequestObject = new Request(kInit);\n    clonedRequestObject[kState] = clonedRequest;\n    clonedRequestObject[kRealm] = this[kRealm];\n    clonedRequestObject[kHeaders] = new Headers();\n    clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList;\n    clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard];\n    clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm];\n\n    // 4. Make clonedRequestObject’s signal follow this’s signal.\n    const ac = new AbortController();\n    if (this.signal.aborted) {\n      ac.abort(this.signal.reason);\n    } else {\n      this.signal.addEventListener('abort', () => {\n        ac.abort(this.signal.reason);\n      }, {\n        once: true\n      });\n    }\n    clonedRequestObject[kSignal] = ac.signal;\n\n    // 4. Return clonedRequestObject.\n    return clonedRequestObject;\n  }\n}\nmixinBody(Request);\nfunction makeRequest(init) {\n  // https://fetch.spec.whatwg.org/#requests\n  const request = {\n    method: 'GET',\n    localURLsOnly: false,\n    unsafeRequest: false,\n    body: null,\n    client: null,\n    reservedClient: null,\n    replacesClientId: '',\n    window: 'client',\n    keepalive: false,\n    serviceWorkers: 'all',\n    initiator: '',\n    destination: '',\n    priority: null,\n    origin: 'client',\n    policyContainer: 'client',\n    referrer: 'client',\n    referrerPolicy: '',\n    mode: 'no-cors',\n    useCORSPreflightFlag: false,\n    credentials: 'same-origin',\n    useCredentials: false,\n    cache: 'default',\n    redirect: 'follow',\n    integrity: '',\n    cryptoGraphicsNonceMetadata: '',\n    parserMetadata: '',\n    reloadNavigation: false,\n    historyNavigation: false,\n    userActivation: false,\n    taintedOrigin: false,\n    redirectCount: 0,\n    responseTainting: 'basic',\n    preventNoCacheCacheControlHeaderModification: false,\n    done: false,\n    timingAllowFailed: false,\n    ...init,\n    headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList()\n  };\n  request.url = request.urlList[0];\n  return request;\n}\n\n// https://fetch.spec.whatwg.org/#concept-request-clone\nfunction cloneRequest(request) {\n  // To clone a request request, run these steps:\n\n  // 1. Let newRequest be a copy of request, except for its body.\n  const newRequest = makeRequest({\n    ...request,\n    body: null\n  });\n\n  // 2. If request’s body is non-null, set newRequest’s body to the\n  // result of cloning request’s body.\n  if (request.body != null) {\n    newRequest.body = cloneBody(request.body);\n  }\n\n  // 3. Return newRequest.\n  return newRequest;\n}\nObject.defineProperties(Request.prototype, {\n  method: kEnumerableProperty,\n  url: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  signal: kEnumerableProperty\n});\nwebidl.converters.Request = webidl.interfaceConverter(Request);\n\n// https://fetch.spec.whatwg.org/#requestinfo\nwebidl.converters.RequestInfo = function (V) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V);\n  }\n  if (V instanceof Request) {\n    return webidl.converters.Request(V);\n  }\n  return webidl.converters.USVString(V);\n};\nwebidl.converters.AbortSignal = webidl.interfaceConverter(AbortSignal);\n\n// https://fetch.spec.whatwg.org/#requestinit\nwebidl.converters.RequestInit = webidl.dictionaryConverter([{\n  key: 'method',\n  converter: webidl.converters.ByteString\n}, {\n  key: 'headers',\n  converter: webidl.converters.HeadersInit\n}, {\n  key: 'body',\n  converter: webidl.nullableConverter(webidl.converters.BodyInit)\n}, {\n  key: 'referrer',\n  converter: webidl.converters.USVString\n}, {\n  key: 'referrerPolicy',\n  converter: webidl.converters.DOMString,\n  // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy\n  allowedValues: ['', 'no-referrer', 'no-referrer-when-downgrade', 'same-origin', 'origin', 'strict-origin', 'origin-when-cross-origin', 'strict-origin-when-cross-origin', 'unsafe-url']\n}, {\n  key: 'mode',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#concept-request-mode\n  allowedValues: ['same-origin', 'cors', 'no-cors', 'navigate', 'websocket']\n}, {\n  key: 'credentials',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#requestcredentials\n  allowedValues: ['omit', 'same-origin', 'include']\n}, {\n  key: 'cache',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#requestcache\n  allowedValues: ['default', 'no-store', 'reload', 'no-cache', 'force-cache', 'only-if-cached']\n}, {\n  key: 'redirect',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#requestredirect\n  allowedValues: ['follow', 'error', 'manual']\n}, {\n  key: 'integrity',\n  converter: webidl.converters.DOMString\n}, {\n  key: 'keepalive',\n  converter: webidl.converters.boolean\n}, {\n  key: 'signal',\n  converter: webidl.nullableConverter(signal => webidl.converters.AbortSignal(signal, {\n    strict: false\n  }))\n}, {\n  key: 'window',\n  converter: webidl.converters.any\n}]);\nmodule.exports = {\n  Request,\n  makeRequest\n};","map":{"version":3,"names":["extractBody","mixinBody","cloneBody","require","Headers","fill","fillHeaders","HeadersList","FinalizationRegistry","util","isValidHTTPToken","sameOrigin","normalizeMethod","forbiddenMethods","corsSafeListedMethods","referrerPolicy","requestRedirect","requestMode","requestCredentials","requestCache","kEnumerableProperty","kHeaders","kSignal","kState","kGuard","kRealm","webidl","getGlobalOrigin","kHeadersList","assert","TransformStream","kInit","Symbol","requestFinalizer","signal","abort","removeEventListener","Request","constructor","input","init","arguments","length","TypeError","converters","RequestInfo","RequestInit","settingsObject","baseUrl","request","fallbackMode","parsedURL","URL","err","cause","username","password","makeRequest","urlList","origin","window","name","undefined","method","headersList","unsafeRequest","client","priority","referrer","mode","credentials","cache","redirect","integrity","keepalive","reloadNavigation","historyNavigation","Object","keys","url","parsedReferrer","includes","errors","exception","header","message","String","Boolean","indexOf","toUpperCase","ac","AbortController","aborted","addEventListener","reason","once","register","headers","clear","key","val","append","inputBody","body","initBody","extractedBody","contentType","has","inputOrInitBody","source","useCORSPreflightFlag","finalBody","isDisturbed","stream","locked","identityTransform","pipeThrough","readable","toStringTag","toString","destination","isReloadNavigation","isHistoryNavigation","clone","bodyUsed","clonedRequest","cloneRequest","clonedRequestObject","localURLsOnly","reservedClient","replacesClientId","serviceWorkers","initiator","policyContainer","useCredentials","cryptoGraphicsNonceMetadata","parserMetadata","userActivation","taintedOrigin","redirectCount","responseTainting","preventNoCacheCacheControlHeaderModification","done","timingAllowFailed","newRequest","defineProperties","prototype","interfaceConverter","V","USVString","AbortSignal","dictionaryConverter","converter","ByteString","HeadersInit","nullableConverter","BodyInit","DOMString","allowedValues","boolean","strict","any","module","exports"],"sources":["/home/jagadeshronanki/projects/millow/node_modules/undici/lib/fetch/request.js"],"sourcesContent":["/* globals AbortController */\n\n'use strict'\n\nconst { extractBody, mixinBody, cloneBody } = require('./body')\nconst { Headers, fill: fillHeaders, HeadersList } = require('./headers')\nconst { FinalizationRegistry } = require('../compat/dispatcher-weakref')()\nconst util = require('../core/util')\nconst {\n  isValidHTTPToken,\n  sameOrigin,\n  normalizeMethod\n} = require('./util')\nconst {\n  forbiddenMethods,\n  corsSafeListedMethods,\n  referrerPolicy,\n  requestRedirect,\n  requestMode,\n  requestCredentials,\n  requestCache\n} = require('./constants')\nconst { kEnumerableProperty } = util\nconst { kHeaders, kSignal, kState, kGuard, kRealm } = require('./symbols')\nconst { webidl } = require('./webidl')\nconst { getGlobalOrigin } = require('./global')\nconst { kHeadersList } = require('../core/symbols')\nconst assert = require('assert')\n\nlet TransformStream\n\nconst kInit = Symbol('init')\n\nconst requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {\n  signal.removeEventListener('abort', abort)\n})\n\n// https://fetch.spec.whatwg.org/#request-class\nclass Request {\n  // https://fetch.spec.whatwg.org/#dom-request\n  constructor (input, init = {}) {\n    if (input === kInit) {\n      return\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\n        `Failed to construct 'Request': 1 argument required, but only ${arguments.length} present.`\n      )\n    }\n\n    input = webidl.converters.RequestInfo(input)\n    init = webidl.converters.RequestInit(init)\n\n    // TODO\n    this[kRealm] = {\n      settingsObject: {\n        baseUrl: getGlobalOrigin()\n      }\n    }\n\n    // 1. Let request be null.\n    let request = null\n\n    // 2. Let fallbackMode be null.\n    let fallbackMode = null\n\n    // 3. Let baseURL be this’s relevant settings object’s API base URL.\n    const baseUrl = this[kRealm].settingsObject.baseUrl\n\n    // 4. Let signal be null.\n    let signal = null\n\n    // 5. If input is a string, then:\n    if (typeof input === 'string') {\n      // 1. Let parsedURL be the result of parsing input with baseURL.\n      // 2. If parsedURL is failure, then throw a TypeError.\n      let parsedURL\n      try {\n        parsedURL = new URL(input, baseUrl)\n      } catch (err) {\n        throw new TypeError('Failed to parse URL from ' + input, { cause: err })\n      }\n\n      // 3. If parsedURL includes credentials, then throw a TypeError.\n      if (parsedURL.username || parsedURL.password) {\n        throw new TypeError(\n          'Request cannot be constructed from a URL that includes credentials: ' +\n            input\n        )\n      }\n\n      // 4. Set request to a new request whose URL is parsedURL.\n      request = makeRequest({ urlList: [parsedURL] })\n\n      // 5. Set fallbackMode to \"cors\".\n      fallbackMode = 'cors'\n    } else {\n      // 6. Otherwise:\n\n      // 7. Assert: input is a Request object.\n      assert(input instanceof Request)\n\n      // 8. Set request to input’s request.\n      request = input[kState]\n\n      // 9. Set signal to input’s signal.\n      signal = input[kSignal]\n    }\n\n    // 7. Let origin be this’s relevant settings object’s origin.\n    const origin = this[kRealm].settingsObject.origin\n\n    // 8. Let window be \"client\".\n    let window = 'client'\n\n    // 9. If request’s window is an environment settings object and its origin\n    // is same origin with origin, then set window to request’s window.\n    if (\n      request.window?.constructor?.name === 'EnvironmentSettingsObject' &&\n      sameOrigin(request.window, origin)\n    ) {\n      window = request.window\n    }\n\n    // 10. If init[\"window\"] exists and is non-null, then throw a TypeError.\n    if (init.window !== undefined && init.window != null) {\n      throw new TypeError(`'window' option '${window}' must be null`)\n    }\n\n    // 11. If init[\"window\"] exists, then set window to \"no-window\".\n    if (init.window !== undefined) {\n      window = 'no-window'\n    }\n\n    // 12. Set request to a new request with the following properties:\n    request = makeRequest({\n      // URL request’s URL.\n      // undici implementation note: this is set as the first item in request's urlList in makeRequest\n      // method request’s method.\n      method: request.method,\n      // header list A copy of request’s header list.\n      // undici implementation note: headersList is cloned in makeRequest\n      headersList: request.headersList,\n      // unsafe-request flag Set.\n      unsafeRequest: request.unsafeRequest,\n      // client This’s relevant settings object.\n      client: this[kRealm].settingsObject,\n      // window window.\n      window,\n      // priority request’s priority.\n      priority: request.priority,\n      // origin request’s origin. The propagation of the origin is only significant for navigation requests\n      // being handled by a service worker. In this scenario a request can have an origin that is different\n      // from the current client.\n      origin: request.origin,\n      // referrer request’s referrer.\n      referrer: request.referrer,\n      // referrer policy request’s referrer policy.\n      referrerPolicy: request.referrerPolicy,\n      // mode request’s mode.\n      mode: request.mode,\n      // credentials mode request’s credentials mode.\n      credentials: request.credentials,\n      // cache mode request’s cache mode.\n      cache: request.cache,\n      // redirect mode request’s redirect mode.\n      redirect: request.redirect,\n      // integrity metadata request’s integrity metadata.\n      integrity: request.integrity,\n      // keepalive request’s keepalive.\n      keepalive: request.keepalive,\n      // reload-navigation flag request’s reload-navigation flag.\n      reloadNavigation: request.reloadNavigation,\n      // history-navigation flag request’s history-navigation flag.\n      historyNavigation: request.historyNavigation,\n      // URL list A clone of request’s URL list.\n      urlList: [...request.urlList]\n    })\n\n    // 13. If init is not empty, then:\n    if (Object.keys(init).length > 0) {\n      // 1. If request’s mode is \"navigate\", then set it to \"same-origin\".\n      if (request.mode === 'navigate') {\n        request.mode = 'same-origin'\n      }\n\n      // 2. Unset request’s reload-navigation flag.\n      request.reloadNavigation = false\n\n      // 3. Unset request’s history-navigation flag.\n      request.historyNavigation = false\n\n      // 4. Set request’s origin to \"client\".\n      request.origin = 'client'\n\n      // 5. Set request’s referrer to \"client\"\n      request.referrer = 'client'\n\n      // 6. Set request’s referrer policy to the empty string.\n      request.referrerPolicy = ''\n\n      // 7. Set request’s URL to request’s current URL.\n      request.url = request.urlList[request.urlList.length - 1]\n\n      // 8. Set request’s URL list to « request’s URL ».\n      request.urlList = [request.url]\n    }\n\n    // 14. If init[\"referrer\"] exists, then:\n    if (init.referrer !== undefined) {\n      // 1. Let referrer be init[\"referrer\"].\n      const referrer = init.referrer\n\n      // 2. If referrer is the empty string, then set request’s referrer to \"no-referrer\".\n      if (referrer === '') {\n        request.referrer = 'no-referrer'\n      } else {\n        // 1. Let parsedReferrer be the result of parsing referrer with\n        // baseURL.\n        // 2. If parsedReferrer is failure, then throw a TypeError.\n        let parsedReferrer\n        try {\n          parsedReferrer = new URL(referrer, baseUrl)\n        } catch (err) {\n          throw new TypeError(`Referrer \"${referrer}\" is not a valid URL.`, { cause: err })\n        }\n\n        // 3. If one of the following is true\n        // parsedReferrer’s cannot-be-a-base-URL is true, scheme is \"about\",\n        // and path contains a single string \"client\"\n        // parsedReferrer’s origin is not same origin with origin\n        // then set request’s referrer to \"client\".\n        // TODO\n\n        // 4. Otherwise, set request’s referrer to parsedReferrer.\n        request.referrer = parsedReferrer\n      }\n    }\n\n    // 15. If init[\"referrerPolicy\"] exists, then set request’s referrer policy\n    // to it.\n    if (init.referrerPolicy !== undefined) {\n      request.referrerPolicy = init.referrerPolicy\n      if (!referrerPolicy.includes(request.referrerPolicy)) {\n        throw new TypeError(\n          `Failed to construct 'Request': The provided value '${request.referrerPolicy}' is not a valid enum value of type ReferrerPolicy.`\n        )\n      }\n    }\n\n    // 16. Let mode be init[\"mode\"] if it exists, and fallbackMode otherwise.\n    let mode\n    if (init.mode !== undefined) {\n      mode = init.mode\n      if (!requestMode.includes(mode)) {\n        throw new TypeError(\n          `Failed to construct 'Request': The provided value '${request.mode}' is not a valid enum value of type RequestMode.`\n        )\n      }\n    } else {\n      mode = fallbackMode\n    }\n\n    // 17. If mode is \"navigate\", then throw a TypeError.\n    if (mode === 'navigate') {\n      webidl.errors.exception({\n        header: 'Request constructor',\n        message: 'invalid request mode navigate.'\n      })\n    }\n\n    // 18. If mode is non-null, set request’s mode to mode.\n    if (mode != null) {\n      request.mode = mode\n    }\n\n    // 19. If init[\"credentials\"] exists, then set request’s credentials mode\n    // to it.\n    if (init.credentials !== undefined) {\n      request.credentials = init.credentials\n      if (!requestCredentials.includes(request.credentials)) {\n        throw new TypeError(\n          `Failed to construct 'Request': The provided value '${request.credentials}' is not a valid enum value of type RequestCredentials.`\n        )\n      }\n    }\n\n    // 18. If init[\"cache\"] exists, then set request’s cache mode to it.\n    if (init.cache !== undefined) {\n      request.cache = init.cache\n      if (!requestCache.includes(request.cache)) {\n        throw new TypeError(\n          `Failed to construct 'Request': The provided value '${request.cache}' is not a valid enum value of type RequestCache.`\n        )\n      }\n    }\n\n    // 21. If request’s cache mode is \"only-if-cached\" and request’s mode is\n    // not \"same-origin\", then throw a TypeError.\n    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {\n      throw new TypeError(\n        \"'only-if-cached' can be set only with 'same-origin' mode\"\n      )\n    }\n\n    // 22. If init[\"redirect\"] exists, then set request’s redirect mode to it.\n    if (init.redirect !== undefined) {\n      request.redirect = init.redirect\n      if (!requestRedirect.includes(request.redirect)) {\n        throw new TypeError(\n          `Failed to construct 'Request': The provided value '${request.redirect}' is not a valid enum value of type RequestRedirect.`\n        )\n      }\n    }\n\n    // 23. If init[\"integrity\"] exists, then set request’s integrity metadata to it.\n    if (init.integrity !== undefined && init.integrity != null) {\n      request.integrity = String(init.integrity)\n    }\n\n    // 24. If init[\"keepalive\"] exists, then set request’s keepalive to it.\n    if (init.keepalive !== undefined) {\n      request.keepalive = Boolean(init.keepalive)\n    }\n\n    // 25. If init[\"method\"] exists, then:\n    if (init.method !== undefined) {\n      // 1. Let method be init[\"method\"].\n      let method = init.method\n\n      // 2. If method is not a method or method is a forbidden method, then\n      // throw a TypeError.\n      if (!isValidHTTPToken(init.method)) {\n        throw TypeError(`'${init.method}' is not a valid HTTP method.`)\n      }\n\n      if (forbiddenMethods.indexOf(method.toUpperCase()) !== -1) {\n        throw TypeError(`'${init.method}' HTTP method is unsupported.`)\n      }\n\n      // 3. Normalize method.\n      method = normalizeMethod(init.method)\n\n      // 4. Set request’s method to method.\n      request.method = method\n    }\n\n    // 26. If init[\"signal\"] exists, then set signal to it.\n    if (init.signal !== undefined) {\n      signal = init.signal\n    }\n\n    // 27. Set this’s request to request.\n    this[kState] = request\n\n    // 28. Set this’s signal to a new AbortSignal object with this’s relevant\n    // Realm.\n    const ac = new AbortController()\n    this[kSignal] = ac.signal\n    this[kSignal][kRealm] = this[kRealm]\n\n    // 29. If signal is not null, then make this’s signal follow signal.\n    if (signal != null) {\n      if (\n        !signal ||\n        typeof signal.aborted !== 'boolean' ||\n        typeof signal.addEventListener !== 'function'\n      ) {\n        throw new TypeError(\n          \"Failed to construct 'Request': member signal is not of type AbortSignal.\"\n        )\n      }\n\n      if (signal.aborted) {\n        ac.abort(signal.reason)\n      } else {\n        const abort = () => ac.abort(signal.reason)\n        signal.addEventListener('abort', abort, { once: true })\n        requestFinalizer.register(this, { signal, abort })\n      }\n    }\n\n    // 30. Set this’s headers to a new Headers object with this’s relevant\n    // Realm, whose header list is request’s header list and guard is\n    // \"request\".\n    this[kHeaders] = new Headers()\n    this[kHeaders][kHeadersList] = request.headersList\n    this[kHeaders][kGuard] = 'request'\n    this[kHeaders][kRealm] = this[kRealm]\n\n    // 31. If this’s request’s mode is \"no-cors\", then:\n    if (mode === 'no-cors') {\n      // 1. If this’s request’s method is not a CORS-safelisted method,\n      // then throw a TypeError.\n      if (!corsSafeListedMethods.includes(request.method)) {\n        throw new TypeError(\n          `'${request.method} is unsupported in no-cors mode.`\n        )\n      }\n\n      // 2. Set this’s headers’s guard to \"request-no-cors\".\n      this[kHeaders][kGuard] = 'request-no-cors'\n    }\n\n    // 32. If init is not empty, then:\n    if (Object.keys(init).length !== 0) {\n      // 1. Let headers be a copy of this’s headers and its associated header\n      // list.\n      let headers = new Headers(this[kHeaders])\n\n      // 2. If init[\"headers\"] exists, then set headers to init[\"headers\"].\n      if (init.headers !== undefined) {\n        headers = init.headers\n      }\n\n      // 3. Empty this’s headers’s header list.\n      this[kHeaders][kHeadersList].clear()\n\n      // 4. If headers is a Headers object, then for each header in its header\n      // list, append header’s name/header’s value to this’s headers.\n      if (headers.constructor.name === 'Headers') {\n        for (const [key, val] of headers) {\n          this[kHeaders].append(key, val)\n        }\n      } else {\n        // 5. Otherwise, fill this’s headers with headers.\n        fillHeaders(this[kHeaders], headers)\n      }\n    }\n\n    // 33. Let inputBody be input’s request’s body if input is a Request\n    // object; otherwise null.\n    const inputBody = input instanceof Request ? input[kState].body : null\n\n    // 34. If either init[\"body\"] exists and is non-null or inputBody is\n    // non-null, and request’s method is `GET` or `HEAD`, then throw a\n    // TypeError.\n    if (\n      ((init.body !== undefined && init.body != null) || inputBody != null) &&\n      (request.method === 'GET' || request.method === 'HEAD')\n    ) {\n      throw new TypeError('Request with GET/HEAD method cannot have body.')\n    }\n\n    // 35. Let initBody be null.\n    let initBody = null\n\n    // 36. If init[\"body\"] exists and is non-null, then:\n    if (init.body !== undefined && init.body != null) {\n      // 1. Let Content-Type be null.\n      // 2. Set initBody and Content-Type to the result of extracting\n      // init[\"body\"], with keepalive set to request’s keepalive.\n      const [extractedBody, contentType] = extractBody(\n        init.body,\n        request.keepalive\n      )\n      initBody = extractedBody\n\n      // 3, If Content-Type is non-null and this’s headers’s header list does\n      // not contain `Content-Type`, then append `Content-Type`/Content-Type to\n      // this’s headers.\n      if (contentType && !this[kHeaders].has('content-type')) {\n        this[kHeaders].append('content-type', contentType)\n      }\n    }\n\n    // 37. Let inputOrInitBody be initBody if it is non-null; otherwise\n    // inputBody.\n    const inputOrInitBody = initBody ?? inputBody\n\n    // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is\n    // null, then:\n    if (inputOrInitBody != null && inputOrInitBody.source == null) {\n      // 1. If this’s request’s mode is neither \"same-origin\" nor \"cors\",\n      // then throw a TypeError.\n      if (request.mode !== 'same-origin' && request.mode !== 'cors') {\n        throw new TypeError(\n          'If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"'\n        )\n      }\n\n      // 2. Set this’s request’s use-CORS-preflight flag.\n      request.useCORSPreflightFlag = true\n    }\n\n    // 39. Let finalBody be inputOrInitBody.\n    let finalBody = inputOrInitBody\n\n    // 40. If initBody is null and inputBody is non-null, then:\n    if (initBody == null && inputBody != null) {\n      // 1. If input is unusable, then throw a TypeError.\n      if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {\n        throw new TypeError(\n          'Cannot construct a Request with a Request object that has already been used.'\n        )\n      }\n\n      // 2. Set finalBody to the result of creating a proxy for inputBody.\n      if (!TransformStream) {\n        TransformStream = require('stream/web').TransformStream\n      }\n\n      // https://streams.spec.whatwg.org/#readablestream-create-a-proxy\n      const identityTransform = new TransformStream()\n      inputBody.stream.pipeThrough(identityTransform)\n      finalBody = {\n        source: inputBody.source,\n        length: inputBody.length,\n        stream: identityTransform.readable\n      }\n    }\n\n    // 41. Set this’s request’s body to finalBody.\n    this[kState].body = finalBody\n  }\n\n  get [Symbol.toStringTag] () {\n    return this.constructor.name\n  }\n\n  // Returns request’s HTTP method, which is \"GET\" by default.\n  get method () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The method getter steps are to return this’s request’s method.\n    return this[kState].method\n  }\n\n  // Returns the URL of request as a string.\n  get url () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The url getter steps are to return this’s request’s URL, serialized.\n    return this[kState].url.toString()\n  }\n\n  // Returns a Headers object consisting of the headers associated with request.\n  // Note that headers added in the network layer by the user agent will not\n  // be accounted for in this object, e.g., the \"Host\" header.\n  get headers () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The headers getter steps are to return this’s headers.\n    return this[kHeaders]\n  }\n\n  // Returns the kind of resource requested by request, e.g., \"document\"\n  // or \"script\".\n  get destination () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The destination getter are to return this’s request’s destination.\n    return this[kState].destination\n  }\n\n  // Returns the referrer of request. Its value can be a same-origin URL if\n  // explicitly set in init, the empty string to indicate no referrer, and\n  // \"about:client\" when defaulting to the global’s default. This is used\n  // during fetching to determine the value of the `Referer` header of the\n  // request being made.\n  get referrer () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // 1. If this’s request’s referrer is \"no-referrer\", then return the\n    // empty string.\n    if (this[kState].referrer === 'no-referrer') {\n      return ''\n    }\n\n    // 2. If this’s request’s referrer is \"client\", then return\n    // \"about:client\".\n    if (this[kState].referrer === 'client') {\n      return 'about:client'\n    }\n\n    // Return this’s request’s referrer, serialized.\n    return this[kState].referrer.toString()\n  }\n\n  // Returns the referrer policy associated with request.\n  // This is used during fetching to compute the value of the request’s\n  // referrer.\n  get referrerPolicy () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The referrerPolicy getter steps are to return this’s request’s referrer policy.\n    return this[kState].referrerPolicy\n  }\n\n  // Returns the mode associated with request, which is a string indicating\n  // whether the request will use CORS, or will be restricted to same-origin\n  // URLs.\n  get mode () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The mode getter steps are to return this’s request’s mode.\n    return this[kState].mode\n  }\n\n  // Returns the credentials mode associated with request,\n  // which is a string indicating whether credentials will be sent with the\n  // request always, never, or only when sent to a same-origin URL.\n  get credentials () {\n    // The credentials getter steps are to return this’s request’s credentials mode.\n    return this[kState].credentials\n  }\n\n  // Returns the cache mode associated with request,\n  // which is a string indicating how the request will\n  // interact with the browser’s cache when fetching.\n  get cache () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The cache getter steps are to return this’s request’s cache mode.\n    return this[kState].cache\n  }\n\n  // Returns the redirect mode associated with request,\n  // which is a string indicating how redirects for the\n  // request will be handled during fetching. A request\n  // will follow redirects by default.\n  get redirect () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The redirect getter steps are to return this’s request’s redirect mode.\n    return this[kState].redirect\n  }\n\n  // Returns request’s subresource integrity metadata, which is a\n  // cryptographic hash of the resource being fetched. Its value\n  // consists of multiple hashes separated by whitespace. [SRI]\n  get integrity () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The integrity getter steps are to return this’s request’s integrity\n    // metadata.\n    return this[kState].integrity\n  }\n\n  // Returns a boolean indicating whether or not request can outlive the\n  // global in which it was created.\n  get keepalive () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The keepalive getter steps are to return this’s request’s keepalive.\n    return this[kState].keepalive\n  }\n\n  // Returns a boolean indicating whether or not request is for a reload\n  // navigation.\n  get isReloadNavigation () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The isReloadNavigation getter steps are to return true if this’s\n    // request’s reload-navigation flag is set; otherwise false.\n    return this[kState].reloadNavigation\n  }\n\n  // Returns a boolean indicating whether or not request is for a history\n  // navigation (a.k.a. back-foward navigation).\n  get isHistoryNavigation () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The isHistoryNavigation getter steps are to return true if this’s request’s\n    // history-navigation flag is set; otherwise false.\n    return this[kState].historyNavigation\n  }\n\n  // Returns the signal associated with request, which is an AbortSignal\n  // object indicating whether or not request has been aborted, and its\n  // abort event handler.\n  get signal () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The signal getter steps are to return this’s signal.\n    return this[kSignal]\n  }\n\n  // Returns a clone of request.\n  clone () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (this.bodyUsed || this.body?.locked) {\n      throw new TypeError('unusable')\n    }\n\n    // 2. Let clonedRequest be the result of cloning this’s request.\n    const clonedRequest = cloneRequest(this[kState])\n\n    // 3. Let clonedRequestObject be the result of creating a Request object,\n    // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.\n    const clonedRequestObject = new Request(kInit)\n    clonedRequestObject[kState] = clonedRequest\n    clonedRequestObject[kRealm] = this[kRealm]\n    clonedRequestObject[kHeaders] = new Headers()\n    clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList\n    clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard]\n    clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm]\n\n    // 4. Make clonedRequestObject’s signal follow this’s signal.\n    const ac = new AbortController()\n    if (this.signal.aborted) {\n      ac.abort(this.signal.reason)\n    } else {\n      this.signal.addEventListener(\n        'abort',\n        () => {\n          ac.abort(this.signal.reason)\n        },\n        { once: true }\n      )\n    }\n    clonedRequestObject[kSignal] = ac.signal\n\n    // 4. Return clonedRequestObject.\n    return clonedRequestObject\n  }\n}\n\nmixinBody(Request)\n\nfunction makeRequest (init) {\n  // https://fetch.spec.whatwg.org/#requests\n  const request = {\n    method: 'GET',\n    localURLsOnly: false,\n    unsafeRequest: false,\n    body: null,\n    client: null,\n    reservedClient: null,\n    replacesClientId: '',\n    window: 'client',\n    keepalive: false,\n    serviceWorkers: 'all',\n    initiator: '',\n    destination: '',\n    priority: null,\n    origin: 'client',\n    policyContainer: 'client',\n    referrer: 'client',\n    referrerPolicy: '',\n    mode: 'no-cors',\n    useCORSPreflightFlag: false,\n    credentials: 'same-origin',\n    useCredentials: false,\n    cache: 'default',\n    redirect: 'follow',\n    integrity: '',\n    cryptoGraphicsNonceMetadata: '',\n    parserMetadata: '',\n    reloadNavigation: false,\n    historyNavigation: false,\n    userActivation: false,\n    taintedOrigin: false,\n    redirectCount: 0,\n    responseTainting: 'basic',\n    preventNoCacheCacheControlHeaderModification: false,\n    done: false,\n    timingAllowFailed: false,\n    ...init,\n    headersList: init.headersList\n      ? new HeadersList(init.headersList)\n      : new HeadersList()\n  }\n  request.url = request.urlList[0]\n  return request\n}\n\n// https://fetch.spec.whatwg.org/#concept-request-clone\nfunction cloneRequest (request) {\n  // To clone a request request, run these steps:\n\n  // 1. Let newRequest be a copy of request, except for its body.\n  const newRequest = makeRequest({ ...request, body: null })\n\n  // 2. If request’s body is non-null, set newRequest’s body to the\n  // result of cloning request’s body.\n  if (request.body != null) {\n    newRequest.body = cloneBody(request.body)\n  }\n\n  // 3. Return newRequest.\n  return newRequest\n}\n\nObject.defineProperties(Request.prototype, {\n  method: kEnumerableProperty,\n  url: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  signal: kEnumerableProperty\n})\n\nwebidl.converters.Request = webidl.interfaceConverter(\n  Request\n)\n\n// https://fetch.spec.whatwg.org/#requestinfo\nwebidl.converters.RequestInfo = function (V) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V)\n  }\n\n  if (V instanceof Request) {\n    return webidl.converters.Request(V)\n  }\n\n  return webidl.converters.USVString(V)\n}\n\nwebidl.converters.AbortSignal = webidl.interfaceConverter(\n  AbortSignal\n)\n\n// https://fetch.spec.whatwg.org/#requestinit\nwebidl.converters.RequestInit = webidl.dictionaryConverter([\n  {\n    key: 'method',\n    converter: webidl.converters.ByteString\n  },\n  {\n    key: 'headers',\n    converter: webidl.converters.HeadersInit\n  },\n  {\n    key: 'body',\n    converter: webidl.nullableConverter(\n      webidl.converters.BodyInit\n    )\n  },\n  {\n    key: 'referrer',\n    converter: webidl.converters.USVString\n  },\n  {\n    key: 'referrerPolicy',\n    converter: webidl.converters.DOMString,\n    // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy\n    allowedValues: [\n      '', 'no-referrer', 'no-referrer-when-downgrade',\n      'same-origin', 'origin', 'strict-origin',\n      'origin-when-cross-origin', 'strict-origin-when-cross-origin',\n      'unsafe-url'\n    ]\n  },\n  {\n    key: 'mode',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#concept-request-mode\n    allowedValues: [\n      'same-origin', 'cors', 'no-cors', 'navigate', 'websocket'\n    ]\n  },\n  {\n    key: 'credentials',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestcredentials\n    allowedValues: [\n      'omit', 'same-origin', 'include'\n    ]\n  },\n  {\n    key: 'cache',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestcache\n    allowedValues: [\n      'default', 'no-store', 'reload', 'no-cache', 'force-cache',\n      'only-if-cached'\n    ]\n  },\n  {\n    key: 'redirect',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestredirect\n    allowedValues: [\n      'follow', 'error', 'manual'\n    ]\n  },\n  {\n    key: 'integrity',\n    converter: webidl.converters.DOMString\n  },\n  {\n    key: 'keepalive',\n    converter: webidl.converters.boolean\n  },\n  {\n    key: 'signal',\n    converter: webidl.nullableConverter(\n      (signal) => webidl.converters.AbortSignal(\n        signal,\n        { strict: false }\n      )\n    )\n  },\n  {\n    key: 'window',\n    converter: webidl.converters.any\n  }\n])\n\nmodule.exports = { Request, makeRequest }\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}