{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deriveKeyFromMnemonicAndPath = void 0;\nfunction deriveKeyFromMnemonicAndPath(mnemonic, hdPath, passphrase) {\n  const {\n    mnemonicToSeedSync\n  } = require(\"ethereum-cryptography/bip39\");\n  const seed = mnemonicToSeedSync(mnemonic, passphrase);\n  const {\n    HDKey\n  } = require(\"ethereum-cryptography/hdkey\");\n  const masterKey = HDKey.fromMasterSeed(seed);\n  const derived = masterKey.derive(hdPath);\n  return derived.privateKey === null ? undefined : Buffer.from(derived.privateKey);\n}\nexports.deriveKeyFromMnemonicAndPath = deriveKeyFromMnemonicAndPath;","map":{"version":3,"mappings":";;;;;;AAGA,SAAgBA,4BAA4B,CAC1CC,QAAgB,EAChBC,MAAc,EACdC,UAAkB;EAElB,MAAM;IACJC;EAAkB,CACnB,GAEGC,OAAO,CAAC,6BAA6B,CAAC;EAC1C,MAAMC,IAAI,GAAGF,kBAAkB,CAACH,QAAQ,EAAEE,UAAU,CAAC;EAErD,MAAM;IACJI;EAAK,CACN,GAEGF,OAAO,CAAC,6BAA6B,CAAC;EAE1C,MAAMG,SAAS,GAAGD,KAAK,CAACE,cAAc,CAACH,IAAI,CAAC;EAC5C,MAAMI,OAAO,GAAGF,SAAS,CAACG,MAAM,CAACT,MAAM,CAAC;EAExC,OAAOQ,OAAO,CAACE,UAAU,KAAK,IAAI,GAC9BC,SAAS,GACTC,MAAM,CAACC,IAAI,CAACL,OAAO,CAACE,UAAU,CAAC;AACrC;AAxBAI","names":["deriveKeyFromMnemonicAndPath","mnemonic","hdPath","passphrase","mnemonicToSeedSync","require","seed","HDKey","masterKey","fromMasterSeed","derived","derive","privateKey","undefined","Buffer","from","exports"],"sources":["/home/jagadeshronanki/projects/millow/node_modules/hardhat/src/internal/util/keys-derivation.ts"],"sourcesContent":["import type { mnemonicToSeedSync as mnemonicToSeedSyncT } from \"ethereum-cryptography/bip39\";\nimport type { HDKey as HDKeyT } from \"ethereum-cryptography/hdkey\";\n\nexport function deriveKeyFromMnemonicAndPath(\n  mnemonic: string,\n  hdPath: string,\n  passphrase: string\n): Buffer | undefined {\n  const {\n    mnemonicToSeedSync,\n  }: {\n    mnemonicToSeedSync: typeof mnemonicToSeedSyncT;\n  } = require(\"ethereum-cryptography/bip39\");\n  const seed = mnemonicToSeedSync(mnemonic, passphrase);\n\n  const {\n    HDKey,\n  }: {\n    HDKey: typeof HDKeyT;\n  } = require(\"ethereum-cryptography/hdkey\");\n\n  const masterKey = HDKey.fromMasterSeed(seed);\n  const derived = masterKey.derive(hdPath);\n\n  return derived.privateKey === null\n    ? undefined\n    : Buffer.from(derived.privateKey);\n}\n"]},"metadata":{},"sourceType":"script"}