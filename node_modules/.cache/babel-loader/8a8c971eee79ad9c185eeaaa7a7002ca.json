{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HDKey = exports.HARDENED_OFFSET = void 0;\nconst hmac_1 = require(\"@noble/hashes/hmac\");\nconst ripemd160_1 = require(\"@noble/hashes/ripemd160\");\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst sha512_1 = require(\"@noble/hashes/sha512\");\nconst _assert_1 = require(\"@noble/hashes/_assert\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst secp = require(\"@noble/secp256k1\");\nconst base_1 = require(\"@scure/base\");\nsecp.utils.hmacSha256Sync = function (key) {\n  const h = hmac_1.hmac.create(sha256_1.sha256, key);\n  for (var _len = arguments.length, messages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    messages[_key - 1] = arguments[_key];\n  }\n  messages.forEach(msg => h.update(msg));\n  return h.digest();\n};\nconst base58c = (0, base_1.base58check)(sha256_1.sha256);\nfunction bytesToNumber(bytes) {\n  return BigInt(`0x${(0, utils_1.bytesToHex)(bytes)}`);\n}\nfunction numberToBytes(num) {\n  return (0, utils_1.hexToBytes)(num.toString(16).padStart(64, '0'));\n}\nconst MASTER_SECRET = (0, utils_1.utf8ToBytes)('Bitcoin seed');\nconst BITCOIN_VERSIONS = {\n  private: 0x0488ade4,\n  public: 0x0488b21e\n};\nexports.HARDENED_OFFSET = 0x80000000;\nconst hash160 = data => (0, ripemd160_1.ripemd160)((0, sha256_1.sha256)(data));\nconst fromU32 = data => (0, utils_1.createView)(data).getUint32(0, false);\nconst toU32 = n => {\n  if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\n    throw new Error(`Invalid number=${n}. Should be from 0 to 2 ** 32 - 1`);\n  }\n  const buf = new Uint8Array(4);\n  (0, utils_1.createView)(buf).setUint32(0, n, false);\n  return buf;\n};\nclass HDKey {\n  constructor(opt) {\n    this.depth = 0;\n    this.index = 0;\n    this.chainCode = null;\n    this.parentFingerprint = 0;\n    if (!opt || typeof opt !== 'object') {\n      throw new Error('HDKey.constructor must not be called directly');\n    }\n    this.versions = opt.versions || BITCOIN_VERSIONS;\n    this.depth = opt.depth || 0;\n    this.chainCode = opt.chainCode;\n    this.index = opt.index || 0;\n    this.parentFingerprint = opt.parentFingerprint || 0;\n    if (!this.depth) {\n      if (this.parentFingerprint || this.index) {\n        throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\n      }\n    }\n    if (opt.publicKey && opt.privateKey) {\n      throw new Error('HDKey: publicKey and privateKey at same time.');\n    }\n    if (opt.privateKey) {\n      if (!secp.utils.isValidPrivateKey(opt.privateKey)) {\n        throw new Error('Invalid private key');\n      }\n      this.privKey = typeof opt.privateKey === 'bigint' ? opt.privateKey : bytesToNumber(opt.privateKey);\n      this.privKeyBytes = numberToBytes(this.privKey);\n      this.pubKey = secp.getPublicKey(opt.privateKey, true);\n    } else if (opt.publicKey) {\n      this.pubKey = secp.Point.fromHex(opt.publicKey).toRawBytes(true);\n    } else {\n      throw new Error('HDKey: no public or private key provided');\n    }\n    this.pubHash = hash160(this.pubKey);\n  }\n  get fingerprint() {\n    if (!this.pubHash) {\n      throw new Error('No publicKey set!');\n    }\n    return fromU32(this.pubHash);\n  }\n  get identifier() {\n    return this.pubHash;\n  }\n  get pubKeyHash() {\n    return this.pubHash;\n  }\n  get privateKey() {\n    return this.privKeyBytes || null;\n  }\n  get publicKey() {\n    return this.pubKey || null;\n  }\n  get privateExtendedKey() {\n    const priv = this.privateKey;\n    if (!priv) {\n      throw new Error('No private key');\n    }\n    return base58c.encode(this.serialize(this.versions.private, (0, utils_1.concatBytes)(new Uint8Array([0]), priv)));\n  }\n  get publicExtendedKey() {\n    if (!this.pubKey) {\n      throw new Error('No public key');\n    }\n    return base58c.encode(this.serialize(this.versions.public, this.pubKey));\n  }\n  static fromMasterSeed(seed) {\n    let versions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BITCOIN_VERSIONS;\n    if (8 * seed.length < 128 || 8 * seed.length > 512) {\n      throw new Error(`HDKey: wrong seed length=${seed.length}. Should be between 128 and 512 bits; 256 bits is advised)`);\n    }\n    const I = (0, hmac_1.hmac)(sha512_1.sha512, MASTER_SECRET, seed);\n    return new HDKey({\n      versions,\n      chainCode: I.slice(32),\n      privateKey: I.slice(0, 32)\n    });\n  }\n  static fromExtendedKey(base58key) {\n    let versions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BITCOIN_VERSIONS;\n    const keyBuffer = base58c.decode(base58key);\n    const keyView = (0, utils_1.createView)(keyBuffer);\n    const version = keyView.getUint32(0, false);\n    const opt = {\n      versions,\n      depth: keyBuffer[4],\n      parentFingerprint: keyView.getUint32(5, false),\n      index: keyView.getUint32(9, false),\n      chainCode: keyBuffer.slice(13, 45)\n    };\n    const key = keyBuffer.slice(45);\n    const isPriv = key[0] === 0;\n    if (version !== versions[isPriv ? 'private' : 'public']) {\n      throw new Error('Version mismatch');\n    }\n    if (isPriv) {\n      return new HDKey({\n        ...opt,\n        privateKey: key.slice(1)\n      });\n    } else {\n      return new HDKey({\n        ...opt,\n        publicKey: key\n      });\n    }\n  }\n  static fromJSON(json) {\n    return HDKey.fromExtendedKey(json.xpriv);\n  }\n  derive(path) {\n    if (!/^[mM]'?/.test(path)) {\n      throw new Error('Path must start with \"m\" or \"M\"');\n    }\n    if (/^[mM]'?$/.test(path)) {\n      return this;\n    }\n    const parts = path.replace(/^[mM]'?\\//, '').split('/');\n    let child = this;\n    for (const c of parts) {\n      const m = /^(\\d+)('?)$/.exec(c);\n      if (!m || m.length !== 3) {\n        throw new Error(`Invalid child index: ${c}`);\n      }\n      let idx = +m[1];\n      if (!Number.isSafeInteger(idx) || idx >= exports.HARDENED_OFFSET) {\n        throw new Error('Invalid index');\n      }\n      if (m[2] === \"'\") {\n        idx += exports.HARDENED_OFFSET;\n      }\n      child = child.deriveChild(idx);\n    }\n    return child;\n  }\n  deriveChild(index) {\n    if (!this.pubKey || !this.chainCode) {\n      throw new Error('No publicKey or chainCode set');\n    }\n    let data = toU32(index);\n    if (index >= exports.HARDENED_OFFSET) {\n      const priv = this.privateKey;\n      if (!priv) {\n        throw new Error('Could not derive hardened child key');\n      }\n      data = (0, utils_1.concatBytes)(new Uint8Array([0]), priv, data);\n    } else {\n      data = (0, utils_1.concatBytes)(this.pubKey, data);\n    }\n    const I = (0, hmac_1.hmac)(sha512_1.sha512, this.chainCode, data);\n    const childTweak = bytesToNumber(I.slice(0, 32));\n    const chainCode = I.slice(32);\n    if (!secp.utils.isValidPrivateKey(childTweak)) {\n      throw new Error('Tweak bigger than curve order');\n    }\n    const opt = {\n      versions: this.versions,\n      chainCode,\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint,\n      index\n    };\n    try {\n      if (this.privateKey) {\n        const added = secp.utils.mod(this.privKey + childTweak, secp.CURVE.n);\n        if (!secp.utils.isValidPrivateKey(added)) {\n          throw new Error('The tweak was out of range or the resulted private key is invalid');\n        }\n        opt.privateKey = added;\n      } else {\n        opt.publicKey = secp.Point.fromHex(this.pubKey).add(secp.Point.fromPrivateKey(childTweak)).toRawBytes(true);\n      }\n      return new HDKey(opt);\n    } catch (err) {\n      return this.deriveChild(index + 1);\n    }\n  }\n  sign(hash) {\n    if (!this.privateKey) {\n      throw new Error('No privateKey set!');\n    }\n    (0, _assert_1.bytes)(hash, 32);\n    return secp.signSync(hash, this.privKey, {\n      canonical: true,\n      der: false\n    });\n  }\n  verify(hash, signature) {\n    (0, _assert_1.bytes)(hash, 32);\n    (0, _assert_1.bytes)(signature, 64);\n    if (!this.publicKey) {\n      throw new Error('No publicKey set!');\n    }\n    let sig;\n    try {\n      sig = secp.Signature.fromCompact(signature);\n    } catch (error) {\n      return false;\n    }\n    return secp.verify(sig, hash, this.publicKey);\n  }\n  wipePrivateData() {\n    this.privKey = undefined;\n    if (this.privKeyBytes) {\n      this.privKeyBytes.fill(0);\n      this.privKeyBytes = undefined;\n    }\n    return this;\n  }\n  toJSON() {\n    return {\n      xpriv: this.privateExtendedKey,\n      xpub: this.publicExtendedKey\n    };\n  }\n  serialize(version, key) {\n    if (!this.chainCode) {\n      throw new Error('No chainCode set');\n    }\n    (0, _assert_1.bytes)(key, 33);\n    return (0, utils_1.concatBytes)(toU32(version), new Uint8Array([this.depth]), toU32(this.parentFingerprint), toU32(this.index), this.chainCode, key);\n  }\n}\nexports.HDKey = HDKey;","map":{"version":3,"names":["Object","defineProperty","exports","value","HDKey","HARDENED_OFFSET","hmac_1","require","ripemd160_1","sha256_1","sha512_1","_assert_1","utils_1","secp","base_1","utils","hmacSha256Sync","key","h","hmac","create","sha256","messages","forEach","msg","update","digest","base58c","base58check","bytesToNumber","bytes","BigInt","bytesToHex","numberToBytes","num","hexToBytes","toString","padStart","MASTER_SECRET","utf8ToBytes","BITCOIN_VERSIONS","private","public","hash160","data","ripemd160","fromU32","createView","getUint32","toU32","n","Number","isSafeInteger","Error","buf","Uint8Array","setUint32","constructor","opt","depth","index","chainCode","parentFingerprint","versions","publicKey","privateKey","isValidPrivateKey","privKey","privKeyBytes","pubKey","getPublicKey","Point","fromHex","toRawBytes","pubHash","fingerprint","identifier","pubKeyHash","privateExtendedKey","priv","encode","serialize","concatBytes","publicExtendedKey","fromMasterSeed","seed","length","I","sha512","slice","fromExtendedKey","base58key","keyBuffer","decode","keyView","version","isPriv","fromJSON","json","xpriv","derive","path","test","parts","replace","split","child","c","m","exec","idx","deriveChild","childTweak","added","mod","CURVE","add","fromPrivateKey","err","sign","hash","signSync","canonical","der","verify","signature","sig","Signature","fromCompact","error","wipePrivateData","undefined","fill","toJSON","xpub"],"sources":["/home/jagadeshronanki/projects/millow/node_modules/@scure/bip32/lib/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HDKey = exports.HARDENED_OFFSET = void 0;\nconst hmac_1 = require(\"@noble/hashes/hmac\");\nconst ripemd160_1 = require(\"@noble/hashes/ripemd160\");\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst sha512_1 = require(\"@noble/hashes/sha512\");\nconst _assert_1 = require(\"@noble/hashes/_assert\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst secp = require(\"@noble/secp256k1\");\nconst base_1 = require(\"@scure/base\");\nsecp.utils.hmacSha256Sync = (key, ...messages) => {\n    const h = hmac_1.hmac.create(sha256_1.sha256, key);\n    messages.forEach((msg) => h.update(msg));\n    return h.digest();\n};\nconst base58c = (0, base_1.base58check)(sha256_1.sha256);\nfunction bytesToNumber(bytes) {\n    return BigInt(`0x${(0, utils_1.bytesToHex)(bytes)}`);\n}\nfunction numberToBytes(num) {\n    return (0, utils_1.hexToBytes)(num.toString(16).padStart(64, '0'));\n}\nconst MASTER_SECRET = (0, utils_1.utf8ToBytes)('Bitcoin seed');\nconst BITCOIN_VERSIONS = { private: 0x0488ade4, public: 0x0488b21e };\nexports.HARDENED_OFFSET = 0x80000000;\nconst hash160 = (data) => (0, ripemd160_1.ripemd160)((0, sha256_1.sha256)(data));\nconst fromU32 = (data) => (0, utils_1.createView)(data).getUint32(0, false);\nconst toU32 = (n) => {\n    if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\n        throw new Error(`Invalid number=${n}. Should be from 0 to 2 ** 32 - 1`);\n    }\n    const buf = new Uint8Array(4);\n    (0, utils_1.createView)(buf).setUint32(0, n, false);\n    return buf;\n};\nclass HDKey {\n    constructor(opt) {\n        this.depth = 0;\n        this.index = 0;\n        this.chainCode = null;\n        this.parentFingerprint = 0;\n        if (!opt || typeof opt !== 'object') {\n            throw new Error('HDKey.constructor must not be called directly');\n        }\n        this.versions = opt.versions || BITCOIN_VERSIONS;\n        this.depth = opt.depth || 0;\n        this.chainCode = opt.chainCode;\n        this.index = opt.index || 0;\n        this.parentFingerprint = opt.parentFingerprint || 0;\n        if (!this.depth) {\n            if (this.parentFingerprint || this.index) {\n                throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\n            }\n        }\n        if (opt.publicKey && opt.privateKey) {\n            throw new Error('HDKey: publicKey and privateKey at same time.');\n        }\n        if (opt.privateKey) {\n            if (!secp.utils.isValidPrivateKey(opt.privateKey)) {\n                throw new Error('Invalid private key');\n            }\n            this.privKey =\n                typeof opt.privateKey === 'bigint' ? opt.privateKey : bytesToNumber(opt.privateKey);\n            this.privKeyBytes = numberToBytes(this.privKey);\n            this.pubKey = secp.getPublicKey(opt.privateKey, true);\n        }\n        else if (opt.publicKey) {\n            this.pubKey = secp.Point.fromHex(opt.publicKey).toRawBytes(true);\n        }\n        else {\n            throw new Error('HDKey: no public or private key provided');\n        }\n        this.pubHash = hash160(this.pubKey);\n    }\n    get fingerprint() {\n        if (!this.pubHash) {\n            throw new Error('No publicKey set!');\n        }\n        return fromU32(this.pubHash);\n    }\n    get identifier() {\n        return this.pubHash;\n    }\n    get pubKeyHash() {\n        return this.pubHash;\n    }\n    get privateKey() {\n        return this.privKeyBytes || null;\n    }\n    get publicKey() {\n        return this.pubKey || null;\n    }\n    get privateExtendedKey() {\n        const priv = this.privateKey;\n        if (!priv) {\n            throw new Error('No private key');\n        }\n        return base58c.encode(this.serialize(this.versions.private, (0, utils_1.concatBytes)(new Uint8Array([0]), priv)));\n    }\n    get publicExtendedKey() {\n        if (!this.pubKey) {\n            throw new Error('No public key');\n        }\n        return base58c.encode(this.serialize(this.versions.public, this.pubKey));\n    }\n    static fromMasterSeed(seed, versions = BITCOIN_VERSIONS) {\n        if (8 * seed.length < 128 || 8 * seed.length > 512) {\n            throw new Error(`HDKey: wrong seed length=${seed.length}. Should be between 128 and 512 bits; 256 bits is advised)`);\n        }\n        const I = (0, hmac_1.hmac)(sha512_1.sha512, MASTER_SECRET, seed);\n        return new HDKey({\n            versions,\n            chainCode: I.slice(32),\n            privateKey: I.slice(0, 32),\n        });\n    }\n    static fromExtendedKey(base58key, versions = BITCOIN_VERSIONS) {\n        const keyBuffer = base58c.decode(base58key);\n        const keyView = (0, utils_1.createView)(keyBuffer);\n        const version = keyView.getUint32(0, false);\n        const opt = {\n            versions,\n            depth: keyBuffer[4],\n            parentFingerprint: keyView.getUint32(5, false),\n            index: keyView.getUint32(9, false),\n            chainCode: keyBuffer.slice(13, 45),\n        };\n        const key = keyBuffer.slice(45);\n        const isPriv = key[0] === 0;\n        if (version !== versions[isPriv ? 'private' : 'public']) {\n            throw new Error('Version mismatch');\n        }\n        if (isPriv) {\n            return new HDKey({ ...opt, privateKey: key.slice(1) });\n        }\n        else {\n            return new HDKey({ ...opt, publicKey: key });\n        }\n    }\n    static fromJSON(json) {\n        return HDKey.fromExtendedKey(json.xpriv);\n    }\n    derive(path) {\n        if (!/^[mM]'?/.test(path)) {\n            throw new Error('Path must start with \"m\" or \"M\"');\n        }\n        if (/^[mM]'?$/.test(path)) {\n            return this;\n        }\n        const parts = path.replace(/^[mM]'?\\//, '').split('/');\n        let child = this;\n        for (const c of parts) {\n            const m = /^(\\d+)('?)$/.exec(c);\n            if (!m || m.length !== 3) {\n                throw new Error(`Invalid child index: ${c}`);\n            }\n            let idx = +m[1];\n            if (!Number.isSafeInteger(idx) || idx >= exports.HARDENED_OFFSET) {\n                throw new Error('Invalid index');\n            }\n            if (m[2] === \"'\") {\n                idx += exports.HARDENED_OFFSET;\n            }\n            child = child.deriveChild(idx);\n        }\n        return child;\n    }\n    deriveChild(index) {\n        if (!this.pubKey || !this.chainCode) {\n            throw new Error('No publicKey or chainCode set');\n        }\n        let data = toU32(index);\n        if (index >= exports.HARDENED_OFFSET) {\n            const priv = this.privateKey;\n            if (!priv) {\n                throw new Error('Could not derive hardened child key');\n            }\n            data = (0, utils_1.concatBytes)(new Uint8Array([0]), priv, data);\n        }\n        else {\n            data = (0, utils_1.concatBytes)(this.pubKey, data);\n        }\n        const I = (0, hmac_1.hmac)(sha512_1.sha512, this.chainCode, data);\n        const childTweak = bytesToNumber(I.slice(0, 32));\n        const chainCode = I.slice(32);\n        if (!secp.utils.isValidPrivateKey(childTweak)) {\n            throw new Error('Tweak bigger than curve order');\n        }\n        const opt = {\n            versions: this.versions,\n            chainCode,\n            depth: this.depth + 1,\n            parentFingerprint: this.fingerprint,\n            index,\n        };\n        try {\n            if (this.privateKey) {\n                const added = secp.utils.mod(this.privKey + childTweak, secp.CURVE.n);\n                if (!secp.utils.isValidPrivateKey(added)) {\n                    throw new Error('The tweak was out of range or the resulted private key is invalid');\n                }\n                opt.privateKey = added;\n            }\n            else {\n                opt.publicKey = secp.Point.fromHex(this.pubKey)\n                    .add(secp.Point.fromPrivateKey(childTweak))\n                    .toRawBytes(true);\n            }\n            return new HDKey(opt);\n        }\n        catch (err) {\n            return this.deriveChild(index + 1);\n        }\n    }\n    sign(hash) {\n        if (!this.privateKey) {\n            throw new Error('No privateKey set!');\n        }\n        (0, _assert_1.bytes)(hash, 32);\n        return secp.signSync(hash, this.privKey, {\n            canonical: true,\n            der: false,\n        });\n    }\n    verify(hash, signature) {\n        (0, _assert_1.bytes)(hash, 32);\n        (0, _assert_1.bytes)(signature, 64);\n        if (!this.publicKey) {\n            throw new Error('No publicKey set!');\n        }\n        let sig;\n        try {\n            sig = secp.Signature.fromCompact(signature);\n        }\n        catch (error) {\n            return false;\n        }\n        return secp.verify(sig, hash, this.publicKey);\n    }\n    wipePrivateData() {\n        this.privKey = undefined;\n        if (this.privKeyBytes) {\n            this.privKeyBytes.fill(0);\n            this.privKeyBytes = undefined;\n        }\n        return this;\n    }\n    toJSON() {\n        return {\n            xpriv: this.privateExtendedKey,\n            xpub: this.publicExtendedKey,\n        };\n    }\n    serialize(version, key) {\n        if (!this.chainCode) {\n            throw new Error('No chainCode set');\n        }\n        (0, _assert_1.bytes)(key, 33);\n        return (0, utils_1.concatBytes)(toU32(version), new Uint8Array([this.depth]), toU32(this.parentFingerprint), toU32(this.index), this.chainCode, key);\n    }\n}\nexports.HDKey = HDKey;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}